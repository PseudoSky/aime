function test2(){
    if(0){ 
        // 1-D numeric
        // from sklearn.metrics.pairwise import manhattan_distances
        x = [0, 0, 1, 1, 2, 4, 2, 1, 2, 0]
        y = [1, 1, 1, 2, 2, 2, 2, 3, 2, 0]
        dist_fun = manhattan_distances
    }else if(0){
        // 2-D numeric
        // from sklearn.metrics.pairwise import euclidean_distances
        x = [[0, 0], [0, 1], [1, 1], [1, 2], [2, 2], [4, 3], [2, 3], [1, 1], [2, 2], [0, 1]]
        y = [[1, 0], [1, 1], [1, 1], [2, 1], [4, 3], [4, 3], [2, 3], [3, 1], [1, 2], [1, 0]]
        dist_fun = euclidean_distances
    }else{
        // 1-D list of strings
        // from nltk.metrics.distance import edit_distance
        //x = ['we', 'shelled', 'clams', 'for', 'the', 'chowder']
        //y = ['class', 'too']
        x = ['i', 'soon', 'found', 'myself', 'muttering', 'to', 'the', 'walls']
        y = ['see', 'drown', 'himself']
        //x = 'we talked about the situation'.split()
        //y = 'we talked about the situation'.split()
        dist_fun = edit_distance
    }
    // dist, cost, acc, path = dtw(x, y, dist_fun);

    // vizualize
    // from matplotlib import pyplot as plt
    // plt.imshow(cost.T, origin='lower', cmap=plt.cm.Reds, interpolation='nearest')
    // plt.plot(path[0], path[1], '-o') // relation
    // plt.xticks(range(len(x)), x)
    // plt.yticks(range(len(y)), y)
    // plt.xlabel('x')
    // plt.ylabel('y')
    // plt.axis('tight')
    // plt.title('Minimum distance: {}'.format(dist))
    // plt.show()
}



function test(type){
    var dist,x,y;
    if(type=="series"){
        dist  = euclidean_pdist
        x     = [0, 0, 1, 1, 2, 4, 2, 1, 2, 0];
        y     = [1, 1, 1, 2, 2, 2, 2, 3, 2, 0];
    }else if(type=="string"){
        dist  = levenshtein;
        x     = ['i', 'soon', 'found', 'myself', 'muttering', 'to', 'the', 'walls'];
        y     = ['see', 'drown', 'himself'];
    }else{
        dist  = euclidean_pdist
        x     = [0, 0, 1, 1, 2, 4, 2, 1, 2, 0];
        y     = [1, 1, 1, 2, 2, 2, 2, 3, 2, 0];
    }
    print(dtw(x, y, dist));
}

// test("string")
// test()
// var incoming=[ 3, 8, 14 ,1,2,3,7];
// var temper=[ 3, 8, 14 ,1,2,3 ];
// print(dtw(incoming,temper,euclidean_norm));
// print(dtw([1,2,3,4,55,8,89,22,1],[1,2,3,4,55,6,89,22,0],euclidean_norm))
// print(dtw(['i','he', 'himself'],['see', 'drown', 'himself'],levenshtein))
// print(euclidean_norm(80,90))
/************************************ EXPECTED OUTPUT ************************************/


// [ 3.3636363636363638,
//   [ [ 3, 8, 14 ],
//     [ 6, 6, 12 ],
//     [ 11, 10, 13 ],
//     [ 15, 16, 13 ],
//     [ 23, 23, 21 ],
//     [ 26, 27, 28 ],
//     [ 28, 31, 33 ],
//     [ 33, 33, 37 ] ],
//   [ [ 3, 8, 14 ],
//     [ 6, 6, 12 ],
//     [ 11, 10, 13 ],
//     [ 15, 16, 13 ],
//     [ 23, 23, 21 ],
//     [ 26, 27, 28 ],
//     [ 28, 31, 33 ],
//     [ 33, 33, 37 ] ],
//   [ [ 0, 1, 2, 3, 4, 5, 6, 7 ], [ 0, 0, 0, 0, 0, 0, 1, 2 ] ] ]
// [ 0.2,
//   [ [ 1, 2, 3, 5, 7, 9, 11, 14, 16, 16 ],
//     [ 2, 2, 3, 5, 7, 9, 11, 14, 16, 16 ],
//     [ 2, 2, 2, 3, 4, 5, 6, 8, 9, 10 ],
//     [ 2, 2, 2, 3, 4, 5, 6, 8, 9, 10 ],
//     [ 3, 3, 3, 2, 2, 2, 2, 3, 3, 5 ],
//     [ 6, 6, 6, 4, 4, 4, 4, 3, 5, 7 ],
//     [ 7, 7, 7, 4, 4, 4, 4, 4, 3, 5 ],
//     [ 7, 7, 7, 5, 5, 5, 5, 6, 4, 4 ],
//     [ 8, 8, 8, 5, 5, 5, 5, 6, 4, 6 ],
//     [ 9, 9, 9, 7, 7, 7, 7, 8, 6, 4 ] ],
//   [ [ 1, 2, 3, 5, 7, 9, 11, 14, 16, 16 ],
//     [ 2, 2, 3, 5, 7, 9, 11, 14, 16, 16 ],
//     [ 2, 2, 2, 3, 4, 5, 6, 8, 9, 10 ],
//     [ 2, 2, 2, 3, 4, 5, 6, 8, 9, 10 ],
//     [ 3, 3, 3, 2, 2, 2, 2, 3, 3, 5 ],
//     [ 6, 6, 6, 4, 4, 4, 4, 3, 5, 7 ],
//     [ 7, 7, 7, 4, 4, 4, 4, 4, 3, 5 ],
//     [ 7, 7, 7, 5, 5, 5, 5, 6, 4, 4 ],
//     [ 8, 8, 8, 5, 5, 5, 5, 6, 4, 6 ],
//     [ 9, 9, 9, 7, 7, 7, 7, 8, 6, 4 ] ],
//   [ [ 0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9 ],
//     [ 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9 ] ] ]



// 0.2 

// [[ 1.  1.  1.  2.  2.  2.  2.  3.  2.  0.]
//  [ 1.  1.  1.  2.  2.  2.  2.  3.  2.  0.]
//  [ 0.  0.  0.  1.  1.  1.  1.  2.  1.  1.]
//  [ 0.  0.  0.  1.  1.  1.  1.  2.  1.  1.]
//  [ 1.  1.  1.  0.  0.  0.  0.  1.  0.  2.]
//  [ 3.  3.  3.  2.  2.  2.  2.  1.  2.  4.]
//  [ 1.  1.  1.  0.  0.  0.  0.  1.  0.  2.]
//  [ 0.  0.  0.  1.  1.  1.  1.  2.  1.  1.]
//  [ 1.  1.  1.  0.  0.  0.  0.  1.  0.  2.]
//  [ 1.  1.  1.  2.  2.  2.  2.  3.  2.  0.]] 

// [[  1.   2.   3.   5.   7.   9.  11.  14.  16.  16.]
//  [  2.   2.   3.   5.   7.   9.  11.  14.  16.  16.]
//  [  2.   2.   2.   3.   4.   5.   6.   8.   9.  10.]
//  [  2.   2.   2.   3.   4.   5.   6.   8.   9.  10.]
//  [  3.   3.   3.   2.   2.   2.   2.   3.   3.   5.]
//  [  6.   6.   6.   4.   4.   4.   4.   3.   5.   7.]
//  [  7.   7.   7.   4.   4.   4.   4.   4.   3.   5.]
//  [  7.   7.   7.   5.   5.   5.   5.   6.   4.   4.]
//  [  8.   8.   8.   5.   5.   5.   5.   6.   4.   6.]
//  [  9.   9.   9.   7.   7.   7.   7.   8.   6.   4.]]

// [[0, 1, 2, 3, 4, 4, 4, 4, 5, 6, 7, 8, 9]
//  [0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 9]]



// 3.36363636364 

// [[ 3.  5.  6.]
//  [ 3.  3.  6.]
//  [ 5.  4.  7.]
//  [ 4.  6.  3.]
//  [ 8.  8.  8.]
//  [ 3.  4.  7.]
//  [ 2.  5.  6.]
//  [ 5.  5.  6.]] 

// [[  3.   8.  14.]
//  [  6.   6.  12.]
//  [ 11.  10.  13.]
//  [ 15.  16.  13.]
//  [ 23.  23.  21.]
//  [ 26.  27.  28.]
//  [ 28.  31.  33.]
//  [ 33.  33.  37.]] 
//  [[0, 1, 2, 3, 4, 5, 6, 7],
//   [0, 0, 0, 0, 0, 0, 1, 2]]


// [ 3.3636363636363638,

//   [ [ 3,  8,  14 ],
//     [ 6,  6,  12 ],
//     [ 11, 10, 13 ],
//     [ 15, 16, 13 ],
//     [ 23, 23, 21 ],
//     [ 26, 27, 28 ],
//     [ 28, 31, 33 ],
//     [ 33, 33, 37 ] ],

//   [ [ 3,  8,  14 ],
//     [ 6,  6,  12 ],
//     [ 11, 10, 13 ],
//     [ 15, 16, 13 ],
//     [ 23, 23, 21 ],
//     [ 26, 27, 28 ],
//     [ 28, 31, 33 ],
//     [ 33, 33, 37 ] ],

//   [ [ 0, 1, 2, 3, 4, 5, 6, 7 ], 
//     [ 0, 0, 0, 0, 0, 0, 1, 2 ] ] ]

function test_classifier(count){
    var cur_time = Date.now();
    var templates=[
        [ 0, 0.9090909090909092, 2.2032085561497325, 3.2032085561497325, 3.6032085561497325, 3.6032085561497325 ],
        [ 2.9, 0.9090909090909092, 2.2032085561497325, 3.2032085561497325, 3.6032085561497325, 3.6032085561497325 ],
        [ 0, 0.9090909090909092, 2.2032085561497325, 3.2032085561497325, 3.6032085561497325, 3.6032085597325 ],
        [0.9090909090909092,2.2032085561497325,3.2032085561497325,1.6032085561497325,3.6032085561497325],
        [.7397169237358767,2.1315094660917784,2.0771225947577925,2.1173824118549893,1.8916483026964062]];
    var c=new Classifier(dtw,templates,euclidean_norm);
    // console.log('C',C);
    for ( var sky = 1; sky < count; sky++ ) {
        next=Math.random()*2.2032085561497325+1
        c.sample(next);
    }
    var end_time = Date.now();

    var timeDifference = end_time - cur_time;
    var differenceDate = new Date(timeDifference * 100);
    var diffHours = differenceDate.getUTCHours()+ ':' +differenceDate.getUTCMinutes()+ ':' +differenceDate.getUTCSeconds();
    console.log('Elapsed',diffHours);


}
// test_classifier(50000)